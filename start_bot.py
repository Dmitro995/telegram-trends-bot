import os
import time
import requests
from pytrends.request import TrendReq
from flask import Flask, request
import pandas as pd
from datetime import datetime
import threading
import re
import json

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CURRENT_GEO = 'IN'
# –ü–∞—Ä–∞–º–µ—Ç—Ä timeframe –¥–ª—è Google Trends ('now 1-d', 'now 7-d', 'now 30-d')
CURRENT_TIMEFRAME = 'now 1-d'
DEFAULT_KEYWORDS = ['casino', 'bet', 'play', 'win', 'game']
try:
    with open('keywords_base.txt', 'r', encoding='utf-8') as f:
        KEYWORDS = [k.strip() for k in f.read().split(',') if k.strip()]
except FileNotFoundError:
    KEYWORDS = DEFAULT_KEYWORDS.copy()
ACTION_STATE = None
VAL_FILTER_ENABLED = True

TELEGRAM_TOKEN = '7543116655:AAHxgebuCQxGzY91o-sTxV2PSZjEe2nBWF8'
TELEGRAM_CHAT_ID = 784190963
MIN_TREND_VALUE = 30
FILTER_MODE = True

app = Flask(__name__)

# === Health check ===
@app.route('/', methods=['GET'])
def index():
    return 'Bot is running', 200

checked_queries = set()
recent_trends = []
SLEEP_TIME = 900  # 15 –º–∏–Ω—É—Ç
pytrends = TrendReq(hl='en-US', tz=330)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
def log(msg, file="log.txt"):
    print(msg)
    with open(file, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] {msg}\n")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram ===
def send_telegram(msg, reply_markup=None):
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': msg,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
    try:
        requests.post(f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage', data=payload)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–æ–≤ ===
def is_probable_new_brand(query):
    q = query.lower()
    NOISE_KEYWORDS = [
        "how to", "trick", "strategy", "tips", "near me", "is legal", "rules", "best", "online gambling"
    ]
    if any(phrase in q for phrase in NOISE_KEYWORDS) or len(q.split()) > 5:
        return False
    BRAND_KEYWORDS = [
        "login", "register", "official", "app", "apk", "casino", "slots",
        "bet", "rummy", "teenpatti", "bonus", "play", "earn", "win"
    ]
    if any(word in q for word in BRAND_KEYWORDS):
        return True
    BRAND_PATTERNS = [
        r"\b(win|fox|cash|luck|mega|star|super)[a-z]{2,}",
        r"[a-z]+(bet|play|win|club|cash|app)\b",
        r"\b[a-z]{3,10}(casino|game|jackpot)\b",
        r"(teenpatti|rummy)\s+(cash|plus|king|master)"
    ]
    for pattern in BRAND_PATTERNS:
        if re.search(pattern, q):
            return True
    return False

# === –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel ===
def export_to_xlsx():
    if not recent_trends:
        return None
    df = pd.DataFrame(recent_trends)
    filename = "trends_export.xlsx"
    df.to_excel(filename, index=False)
    return filename

# === –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª ===
def trends_loop():
    while True:
        try:
            check_trends()
        except Exception as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–µ: {e}")
        time.sleep(SLEEP_TIME)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ ===
def check_trends():
    try:
        pytrends.build_payload(['online casino'], geo=CURRENT_GEO, timeframe=CURRENT_TIMEFRAME)
        related = pytrends.related_queries()
        rising = related.get('online casino', {}).get('rising')
        if isinstance(rising, pd.DataFrame) and not rising.empty:
            for _, row in rising.iterrows():
                query, val = row['query'], row['value']
                if (not VAL_FILTER_ENABLED or val >= MIN_TREND_VALUE) and query not in checked_queries:
                    if not FILTER_MODE or is_probable_new_brand(query):
                        checked_queries.add(query)
                        info = {"query": query, "value": val,
                                "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
                        recent_trends.append(info)
                        msg = (f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–∑–∏–Ω–æ –≤ {CURRENT_GEO} "
                               f"(–ø–µ—Ä–∏–æ–¥ {CURRENT_TIMEFRAME}):\n<b>{query}</b> (value: {val})")
                        send_telegram(msg)
                        log(msg, "log_new_casinos.txt")
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")

# === Webhook –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    global MIN_TREND_VALUE, FILTER_MODE, VAL_FILTER_ENABLED,
    global CURRENT_GEO, CURRENT_TIMEFRAME, ACTION_STATE
    data = request.json
    log(f"Incoming: {json.dumps(data, ensure_ascii=False)}")
    # Inline-–∫–Ω–æ–ø–∫–∏
    if 'callback_query' in data:
        cd = data['callback_query']['data']
        answer = ""
        if cd.startswith("set_value_"):
            v = int(cd.split("_")[-1])
            if 0 <= v <= 100:
                MIN_TREND_VALUE = v
                answer = f"‚úÖ –ü–æ—Ä–æ–≥ value: ‚â• {v}"
        elif cd.startswith("geo_"):
            CURRENT_GEO = cd.split("_")[-1]
            answer = f"üåç –°—Ç—Ä–∞–Ω–∞: {CURRENT_GEO}"
        elif cd.startswith("tf_"):
            tf = cd.split("_")[-1]
            mapping = {'1d':'now 1-d', '7d':'now 7-d', '30d':'now 30-d'}
            labels = {'1d':'1 –¥–µ–Ω—å', '7d':'7 –¥–Ω–µ–π', '30d':'30 –¥–Ω–µ–π'}
            if tf in mapping:
                CURRENT_TIMEFRAME = mapping[tf]
                answer = f"‚è± –ü–µ—Ä–∏–æ–¥: {labels[tf]}"
        if answer:
            requests.post(f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerCallbackQuery',
                          data={'callback_query_id': data['callback_query']['id'], 'text': answer})
            send_telegram(answer)
        return {"ok": True}

    msg = data.get('message', {}).get('text')
    # –ú–µ–Ω—é
    if msg == "/start":
        kb = [
            [{'text':'üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞'}, {'text':'üïµÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10'}],
            [{'text':'üì• Excel'}, {'text':'‚öôÔ∏è –ü–æ—Ä–æ–≥'}],
            [{'text':'üéö –§–∏–ª—å—Ç—Ä'}, {'text':'üî¢ –§–∏–ª—å—Ç—Ä value'}],
            [{'text':'üåç –°—Ç—Ä–∞–Ω–∞'}, {'text':'üìÜ –ü–µ—Ä–∏–æ–¥'}],
            [{'text':'‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞'}, {'text':'üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞'}],
            [{'text':'üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞'}, {'text':'üîÑ –°–±—Ä–æ—Å —Å–ª–æ–≤'}]
        ]
        send_telegram("üëã –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup={'keyboard': kb, 'resize_keyboard': True})
    elif msg == 'üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞':
        status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
        val_state = 'ON' if VAL_FILTER_ENABLED else 'OFF'
        tf_label = {'now 1-d':'1 –¥–µ–Ω—å', 'now 7-d':'7 –¥–Ω–µ–π', 'now 30-d':'30 –¥–Ω–µ–π'}.get(CURRENT_TIMEFRAME, CURRENT_TIMEFRAME)
        send_telegram(
            f"üì° –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {CURRENT_GEO}\n"
            f"‚è± –ü–µ—Ä–∏–æ–¥: {tf_label}\n"
            f"üíπ –ü–æ—Ä–æ–≥ value: ‚â• {MIN_TREND_VALUE} (filter {val_state})\n"
            f"üéö –§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤: {'–í–ö–õ' if FILTER_MODE else '–í–´–ö–õ'}\n"
            f"üî§ –°–ª–æ–≤–∞: {', '.join(KEYWORDS)}"
        )
    elif msg == 'üìÜ –ü–µ—Ä–∏–æ–¥':
        inline = [[
            {'text':'1 –¥–µ–Ω—å','callback_data':'tf_1d'},
            {'text':'7 –¥–Ω–µ–π','callback_data':'tf_7d'},
            {'text':'30 –¥–Ω–µ–π','callback_data':'tf_30d'}
        ]]
        send_telegram("‚è± –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup={'inline_keyboard': inline})
    # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    return {"ok": True}

if __name__ == '__main__':
    manual_webhook_url = f'https://telegram-trends-bot.onrender.com/{TELEGRAM_TOKEN}'
    try:
        requests.get(f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook?url={manual_webhook_url}')
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
    threading.Thread(target=trends_loop, daemon=True).start()
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
