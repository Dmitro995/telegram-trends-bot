import os
import subprocess
import time
import requests
from pytrends.request import TrendReq
from flask import Flask, request
import pandas as pd
from datetime import datetime
import threading
import re
import json

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CURRENT_GEO = 'IN'
DEFAULT_KEYWORDS = ['casino', 'bet', 'play', 'win', 'game']
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
try:
    with open('keywords_base.txt', 'r', encoding='utf-8') as f:
        KEYWORDS = [k.strip() for k in f.read().split(',') if k.strip()]
except FileNotFoundError:
    KEYWORDS = DEFAULT_KEYWORDS.copy()

TELEGRAM_TOKEN = '7543116655:AAHxgebuCQxGzY91o-sTxV2PSZjEe2nBWF8'
TELEGRAM_CHAT_ID = 784190963
NGROK_PATH = 'ngrok.exe'
MIN_TREND_VALUE = 30
FILTER_MODE = True
NGROK_URL = None
ACTION_STATE = None

app = Flask(__name__)
checked_queries = set()
recent_trends = []
SLEEP_TIME = 900  # 15 –º–∏–Ω—É—Ç
pytrends = TrendReq(hl='en-US', tz=330)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
def log(msg, file="log.txt"):
    print(msg)
    with open(file, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] {msg}\n")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram ===
def send_telegram(msg, reply_markup=None):
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': msg,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
    try:
        requests.post(f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage', data=payload)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–æ–≤ ===
def is_probable_new_brand(query):
    q = query.lower()
    # –°—Ç–æ–ø-—Å–ª–æ–≤–∞
    NOISE_KEYWORDS = [
        "how to", "trick", "strategy", "tips", "near me", "is legal", "rules", "best", "online gambling"
    ]
    if any(phrase in q for phrase in NOISE_KEYWORDS):
        return False
    # –î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞
    if len(q.split()) > 5:
        return False
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±—Ä–µ–Ω–¥–æ–≤
    BRAND_KEYWORDS = [
        "login", "register", "official", "app", "apk", "casino", "slots", "bet", "rummy", "teenpatti", "bonus", "play", "earn", "win"
    ]
    if any(word in q for word in BRAND_KEYWORDS):
        return True
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    BRAND_PATTERNS = [
        r"\b(win|fox|cash|luck|mega|star|super)[a-z]{2,}",
        r"[a-z]+(bet|play|win|club|cash|app)\b",
        r"\b[a-z]{3,10}(casino|game|jackpot)\b",
        r"(teenpatti|rummy)\s+(cash|plus|king|master)"
    ]
    for pattern in BRAND_PATTERNS:
        if re.search(pattern, q):
            return True
    return False

# === –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel ===
def export_to_xlsx():
    if not recent_trends:
        return None
    df = pd.DataFrame(recent_trends)
    filename = "trends_export.xlsx"
    df.to_excel(filename, index=False)
    return filename

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ ===
def check_trends():
    try:
        pytrends.build_payload(['online casino'], geo=CURRENT_GEO, timeframe='now 1-d')
        related = pytrends.related_queries()
        rising = None
        if isinstance(related, dict):
            topic_data = related.get('online casino')
            if isinstance(topic_data, dict):
                rising = topic_data.get('rising')
        if isinstance(rising, pd.DataFrame) and not rising.empty:
            for _, row in rising.iterrows():
                query, val = row['query'], row['value']
                if val >= MIN_TREND_VALUE and query not in checked_queries:
                    if not FILTER_MODE or is_probable_new_brand(query):
                        checked_queries.add(query)
                        info = {"query": query, "value": val, "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
                        recent_trends.append(info)
                        msg = f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–∑–∏–Ω–æ –≤ {CURRENT_GEO}:\n<b>{query}</b> (value: {val})"
                        send_telegram(msg)
                        log(msg, "log_new_casinos.txt")
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")

# === Webhook ===
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    global MIN_TREND_VALUE, FILTER_MODE, KEYWORDS, CURRENT_GEO, ACTION_STATE
    data = request.json
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
    if 'callback_query' in data:
        cd = data['callback_query']['data']
        answer = ""
        if cd.startswith("set_value_"):
            v = int(cd.replace("set_value_", ""))
            if 10 <= v <= 100:
                MIN_TREND_VALUE = v
                answer = f"‚úÖ –§–∏–ª—å—Ç—Ä –æ–±–Ω–æ–≤–ª—ë–Ω: value ‚â• {v}"
            else:
                answer = "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 100"
        elif cd.startswith("geo_"):
            CURRENT_GEO = cd.replace("geo_", "")
            answer = f"üåç –°—Ç—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {CURRENT_GEO}"
        if answer:
            requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerCallbackQuery", data={
                'callback_query_id': data['callback_query']['id'], 'text': answer
            })
            send_telegram(answer)
        return {"ok": True}

    msg = data.get('message', {}).get('text')
    # –ú–µ–Ω—é
    if msg == "/start":
        kb = [[{'text':'üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞'},{'text':'üïµÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10'}],
              [{'text':'üì• Excel'},{'text':'‚öôÔ∏è –ü–æ—Ä–æ–≥'}],
              [{'text':'üéö –§–∏–ª—å—Ç—Ä'},{'text':'üåç –°—Ç—Ä–∞–Ω–∞'}],
              [{'text':'‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞'},{'text':'üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞'}],
              [{'text':'üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞'},{'text':'üîÑ –°–±—Ä–æ—Å —Å–ª–æ–≤'}]]
        send_telegram("üëã –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup={'keyboard':kb,'resize_keyboard':True})
    elif msg == 'üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞':
        status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if NGROK_URL else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        send_telegram(f"üì° –°—Ç–∞—Ç—É—Å: {status}\nüåç –°—Ç—Ä–∞–Ω–∞: {CURRENT_GEO}\nvalue ‚â• {MIN_TREND_VALUE}\nüî§ –°–ª–æ–≤–∞: {', '.join(KEYWORDS)}\nüéö –§–∏–ª—å—Ç—Ä: {'–í–ö–õ' if FILTER_MODE else '–í–´–ö–õ'}")
    elif msg == 'üïµÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10':
        if recent_trends:
            txt = "\n".join([f"{t['time']} ‚Äì {t['query']} ({t['value']})" for t in recent_trends[-10:]])
            send_telegram(f"üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10:\n{txt}")
        else:
            send_telegram("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    elif msg == 'üì• Excel':
        path = export_to_xlsx()
        if path:
            with open(path,'rb') as f:
                requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument", files={'document':f}, data={'chat_id':TELEGRAM_CHAT_ID})
        else:
            send_telegram("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    elif msg == '‚öôÔ∏è –ü–æ—Ä–æ–≥':
        inline = [[{'text':str(v),'callback_data':f'set_value_{v}'} for v in range(10,101,10)]]
        send_telegram("üîß –í—ã–±–µ—Ä–∏ –ø–æ—Ä–æ–≥:", reply_markup={'inline_keyboard':inline})
    elif msg == 'üéö –§–∏–ª—å—Ç—Ä':
        FILTER_MODE = not FILTER_MODE
        send_telegram(f"üéö –§–∏–ª—å—Ç—Ä {'–≤–∫–ª—é—á—ë–Ω' if FILTER_MODE else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    elif msg == 'üåç –°—Ç—Ä–∞–Ω–∞':
        inline = [[{'text':'üáÆüá≥ IN','callback_data':'geo_IN'},{'text':'üá™üá¨ EG','callback_data':'geo_EG'},{'text':'üá∫üá∏ US','callback_data':'geo_US'}]]
        send_telegram("üåç –í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É:", reply_markup={'inline_keyboard':inline})
    elif msg == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞':
        ACTION_STATE = 'add'
        send_telegram("‚úçÔ∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    elif msg == 'üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞':
        send_telegram(f"üî§ –¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞: {', '.join(KEYWORDS)}")
    elif msg == 'üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞':
        ACTION_STATE = 'delete'
        send_telegram("‚úÇÔ∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    elif msg == 'üîÑ –°–±—Ä–æ—Å —Å–ª–æ–≤':
        KEYWORDS = DEFAULT_KEYWORDS.copy()
        with open('keywords_base.txt','w',encoding='utf-8') as f:
            f.write(','.join(KEYWORDS))
        send_telegram(f"üîÅ –°–±—Ä–æ—Å —Å–ª–æ–≤: {', '.join(KEYWORDS)}")
    elif ACTION_STATE == 'add' and msg:
        new = [k.strip().lower() for k in msg.split(',') if k.strip()]
        for w in new:
            if w not in KEYWORDS:
                KEYWORDS.append(w)
        with open('keywords_base.txt','w',encoding='utf-8') as f:
            f.write(','.join(KEYWORDS))
        send_telegram(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {', '.join(new)}")
        ACTION_STATE = None
    elif ACTION_STATE == 'delete' and msg:
        rem = [k.strip().lower() for k in msg.split(',') if k.strip()]
        KEYWORDS = [w for w in KEYWORDS if w not in rem]
        with open('keywords_base.txt','w',encoding='utf-8') as f:
            f.write(','.join(KEYWORDS))
        send_telegram(f"üóë –£–¥–∞–ª–µ–Ω–æ: {', '.join(rem)}")
        ACTION_STATE = None
    return {"ok": True}

def trends_loop():
    while True:
        check_trends()
        time.sleep(SLEEP_TIME)

def start_ngrok():
    subprocess.Popen([NGROK_PATH,'http','5000'])
    time.sleep(3)
    r = requests.get('http://localhost:4040/api/tunnels')
    return r.json()['tunnels'][0]['public_url']

def set_webhook(ngrok_url):
    requests.get(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook?url={ngrok_url}/{TELEGRAM_TOKEN}")

if __name__ == '__main__':
    NGROK_URL = start_ngrok()
    set_webhook(NGROK_URL)
    threading.Thread(target=trends_loop, daemon=True).start()
    app.run(port=5000)
