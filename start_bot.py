import os
import time
import json
import requests
import threading
import re
import pandas as pd
from datetime import datetime
from pytrends.request import TrendReq
from flask import Flask, request

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CURRENT_GEO = 'IN'
# –ü–∞—Ä–∞–º–µ—Ç—Ä timeframe –¥–ª—è Google Trends: 'now 1-d', 'now 7-d', 'now 30-d'
CURRENT_TIMEFRAME = 'now 1-d'
DEFAULT_KEYWORDS = ['casino', 'bet', 'play', 'win', 'game']

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
try:
    with open('keywords_base.txt', 'r', encoding='utf-8') as f:
        KEYWORDS = [k.strip() for k in f.read().split(',') if k.strip()]
except FileNotFoundError:
    KEYWORDS = DEFAULT_KEYWORDS.copy()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤
ACTION_STATE = None
# –§–ª–∞–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ value
VAL_FILTER_ENABLED = True
# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤ (—Å–µ–∫)
CHECK_INTERVAL = 900  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç

TELEGRAM_TOKEN = '7543116655:AAHxgebuCQxGzY91o-sTxV2PSZjEe2nBWF8'
TELEGRAM_CHAT_ID = 784190963
MIN_TREND_VALUE = 30
# –§–ª–∞–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –±—Ä–µ–Ω–¥–∞
FILTER_MODE = True

app = Flask(__name__)
pytrends = TrendReq(hl='en-US', tz=330)
checked_queries = set()
recent_trends = []

# === Health check ===
@app.route('/', methods=['GET'])
def index():
    return 'Bot is running', 200

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
def log(msg: str, file: str = "log.txt"):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {msg}")
    with open(file, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {msg}\n")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram ===
def send_telegram(msg: str, reply_markup: dict = None):
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': msg,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
    try:
        requests.post(f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage', data=payload)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–æ–≤ ===
def is_probable_new_brand(query: str) -> bool:
    q = query.lower()
    NOISE_KEYWORDS = [
        "how to", "trick", "strategy", "tips", "near me", "is legal", "rules", "best", "online gambling"
    ]
    if any(phrase in q for phrase in NOISE_KEYWORDS) or len(q.split()) > 5:
        return False
    BRAND_KEYWORDS = [
        "login", "register", "official", "app", "apk", "casino", "slots",
        "bet", "rummy", "teenpatti", "bonus", "play", "earn", "win"
    ]
    if any(word in q for word in BRAND_KEYWORDS):
        return True
    BRAND_PATTERNS = [
        r"\b(win|fox|cash|luck|mega|star|super)[a-z]{2,}",
        r"[a-z]+(bet|play|win|club|cash|app)\b",
        r"\b[a-z]{3,10}(casino|game|jackpot)\b",
        r"(teenpatti|rummy)\s+(cash|plus|king|master)"
    ]
    for pattern in BRAND_PATTERNS:
        if re.search(pattern, q):
            return True
    return False

# === –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel ===
def export_to_xlsx() -> str:
    if not recent_trends:
        return None
    df = pd.DataFrame(recent_trends)
    filename = "trends_export.xlsx"
    df.to_excel(filename, index=False)
    return filename

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ —Å –ª–æ–≥–∞–º–∏ –æ—Ç–ª–∞–¥–∫–∏ ===
def check_trends():
    log(f"DEBUG: –ó–∞–ø—É—Å–∫–∞—é check_trends() —Å timeframe={CURRENT_TIMEFRAME}, geo={CURRENT_GEO}")
    try:
        pytrends.build_payload(['online casino'], geo=CURRENT_GEO, timeframe=CURRENT_TIMEFRAME)
        related = pytrends.related_queries()
        log(f"DEBUG: related_queries() –≤–µ—Ä–Ω—É–ª–æ: {type(related)} with keys: {list(related.keys())}")
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∫ JSON
        try:
            log(f"DEBUG: Raw related content: {json.dumps(related, default=str, ensure_ascii=False)}")
        except Exception as ex:
            log(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å related: {ex}, type: {type(related)}").get('rising')
        if rising is None:
            log("DEBUG: rising == None")
        elif hasattr(rising, 'empty') and rising.empty:
            log("DEBUG: rising –ø—É—Å—Ç–æ–π DataFrame")
        else:
            rows = len(rising)
            log(f"DEBUG: rising —Å–æ–¥–µ—Ä–∂–∏—Ç {rows} —Å—Ç—Ä–æ–∫")
            for _, row in rising.iterrows():
                query, val = row['query'], row['value']
                if (not VAL_FILTER_ENABLED or val >= MIN_TREND_VALUE) and query not in checked_queries:
                    if not FILTER_MODE or is_probable_new_brand(query):
                        checked_queries.add(query)
                        info = {"query": query, "value": val,
                                "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
                        recent_trends.append(info)
                        msg = (f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–∑–∏–Ω–æ –≤ {CURRENT_GEO} "
                               f"(–ø–µ—Ä–∏–æ–¥ {CURRENT_TIMEFRAME}):\n<b>{query}</b> (value: {val})")
                        send_telegram(msg)
                        log(msg, "log_new_casinos.txt")
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")

# === –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª ===
def trends_loop():
    while True:
        try:
            check_trends()
        except Exception as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–µ: {e}")
        time.sleep(CHECK_INTERVAL)

# === Webhook –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    global MIN_TREND_VALUE, FILTER_MODE, VAL_FILTER_ENABLED, CURRENT_GEO, CURRENT_TIMEFRAME, ACTION_STATE, KEYWORDS, CHECK_INTERVAL
    data = request.get_json(force=True)
    log("DEBUG: –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ")
    log(f"‚öôÔ∏è Incoming update: {json.dumps(data, ensure_ascii=False)}")

    # --- Inline‚Äë–∫–Ω–æ–ø–∫–∏ ---
    cq = data.get('callback_query')
    log(f"DEBUG: callback_query: {cq}")
    if cq:
        cmd = cq.get('data', '')
        answer = None
        if cmd.startswith('set_value_'):
            v = int(cmd.split('_')[-1])
            if 0 <= v <= 100:
                MIN_TREND_VALUE = v
                answer = f"‚úÖ –ü–æ—Ä–æ–≥ value –æ–±–Ω–æ–≤–ª—ë–Ω: ‚â• {v}"
        elif cmd.startswith('geo_'):
            CURRENT_GEO = cmd.split('_')[-1]
            answer = f"üåç –°—Ç—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {CURRENT_GEO}"
        elif cmd.startswith('tf_'):
            tf = cmd.split('_')[-1]
            mapping = {'1d': 'now 1-d', '7d': 'now 7-d', '30d': 'now 30-d'}
            labels = {'1d': '1 –¥–µ–Ω—å', '7d': '7 –¥–Ω–µ–π', '30d': '30 –¥–Ω–µ–π'}
            if tf in mapping:
                CURRENT_TIMEFRAME = mapping[tf]
                answer = f"‚è± –ü–µ—Ä–∏–æ–¥: {labels[tf]}"
        elif cmd.startswith('int_'):
            sec = int(cmd.split('_')[-1])
            if sec > 0:
                CHECK_INTERVAL = sec
                minutes = sec // 60
                answer = f"‚è≤ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {minutes} –º–∏–Ω"
        if answer:
            requests.post(
                f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerCallbackQuery',
                data={'callback_query_id': cq['id'], 'text': answer}
            )
            send_telegram(answer)
        return {"ok": True}

    # --- Reply‚Äë–∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
    text = data.get('message', {}).get('text', '')
    log(f"DEBUG: message text: {text}")
    if text == '/start':
        kb = [
            [{'text': 'üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞'}, {'text': 'üïµÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10'}],
            [{'text': 'üì• Excel'}, {'text': '‚öôÔ∏è –ü–æ—Ä–æ–≥'}],
            [{'text': 'üéö –§–∏–ª—å—Ç—Ä'}, {'text': 'üî¢ –§–∏–ª—å—Ç—Ä value'}],
            [{'text': 'üåç –°—Ç—Ä–∞–Ω–∞'}, {'text': 'üìÜ –ü–µ—Ä–∏–æ–¥'}],
            [{'text': '‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª'}],
            [{'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞'}, {'text': 'üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞'}],
            [{'text': 'üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞'}, {'text': 'üîÑ –°–±—Ä–æ—Å —Å–ª–æ–≤'}]
        ]
        send_telegram("üëã –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup={'keyboard': kb, 'resize_keyboard': True})
    elif text == 'üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞':
        status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
        val_state = 'ON' if VAL_FILTER_ENABLED else 'OFF'
        period = {'now 1-d': '1 –¥–µ–Ω—å', 'now 7-d': '7 –¥–Ω–µ–π', 'now 30-d': '30 –¥–Ω–µ–π'}.get(CURRENT_TIMEFRAME,CURRENT_TIMEFRAME)
        interval_min = CHECK_INTERVAL // 60
        send_telegram(
            f"üì° {status}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {CURRENT_GEO}\n"
            f"‚è± –ü–µ—Ä–∏–æ–¥: {period}\n"
            f"‚è≤ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_min} –º–∏–Ω\n"
            f"üíπ –ü–æ—Ä–æ–≥ value: ‚â• {MIN_TREND_VALUE} (filter {'ON' if VAL_FILTER_ENABLED else 'OFF'})\n"
            f"üéö –§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤: {'–í–ö–õ' if FILTER_MODE else '–í–´–ö–õ'}\n"
            f"üî§ –°–ª–æ–≤–∞: {', '.join(KEYWORDS)}"
        )
    elif text == 'üïµÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10':
        if recent_trends:
            txt = "\n".join([f"{t['time']} ‚Äì {t['query']} ({t['value']})" for t in recent_trends[-10:]])
            send_telegram(f"üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10:\n{txt}")
        else:
            send_telegram("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    elif text == 'üì• Excel':
        path = export_to_xlsx()
        if path:
            with open(path, 'rb') as f:
                requests.post(
                    f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument',
                    files={'document': f},
                    data={'chat_id': TELEGRAM_CHAT_ID}
                )
        else:
            send_telegram("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    elif text == '‚öôÔ∏è –ü–æ—Ä–æ–≥':
        inline = [[{'text': str(v), 'callback_data': f'set_value_{v}'} for v in range(0,101,10)]]
        send_telegram("üîß –í—ã–±–µ—Ä–∏ –ø–æ—Ä–æ–≥ value:", reply_markup={'inline_keyboard': inline})
    elif text == 'üéö –§–∏–ª—å—Ç—Ä':
        FILTER_MODE = not FILTER_MODE
        send_telegram(f"üéö –§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤ {'–≤–∫–ª—é—á—ë–Ω' if FILTER_MODE else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    elif text == 'üî¢ –§–∏–ª—å—Ç—Ä value':
        VAL_FILTER_ENABLED = not VAL_FILTER_ENABLED
        send_telegram(f"üî¢ –§–∏–ª—å—Ç—Ä value: {'ON' if VAL_FILTER_ENABLED else 'OFF'}")
    elif text == 'üåç –°—Ç—Ä–∞–Ω–∞':
        inline = [[{'text':'üáÆüá≥ IN','callback_data':'geo_IN'},{'text':'üá™üá¨ EG','callback_data':'geo_EG'},{'text':'üá∫üá∏ US','callback_data':'geo_US'}]]
        send_telegram("üåç –í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É:", reply_markup={'inline_keyboard': inline})
    elif text == 'üìÜ –ü–µ—Ä–∏–æ–¥':
        inline = [[{'text':'1 –¥–µ–Ω—å','callback_data':'tf_1d'},{'text':'7 –¥–Ω–µ–π','callback_data':'tf_7d'},{'text':'30 –¥–Ω–µ–π','callback_data':'tf_30d'}]]
        send_telegram("‚è± –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup={'inline_keyboard': inline})
    elif text == '‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª':
        inline = [[{'text':'1 –º–∏–Ω','callback_data':'int_60'},{'text':'5 –º–∏–Ω','callback_data':'int_300'},{'text':'15 –º–∏–Ω','callback_data':'int_900'}]]
        send_telegram("‚è± –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:", reply_markup={'inline_keyboard': inline})
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞':
        ACTION_STATE = 'add'
        send_telegram("‚úçÔ∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    elif text == 'üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞':
        send_telegram(f"üî§ –¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞: {', '.join(KEYWORDS)}")
    elif text == 'üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞':
        ACTION_STATE = 'delete'
        send_telegram("‚úÇÔ∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    elif text == 'üîÑ –°–±—Ä–æ—Å —Å–ª–æ–≤':
        KEYWORDS = DEFAULT_KEYWORDS.copy()
        with open('keywords_base.txt','w',encoding='utf-8') as f:
            f.write(','.join(KEYWORDS))
        send_telegram(f"üîÅ –°–±—Ä–æ—Å —Å–ª–æ–≤: {', '.join(KEYWORDS)}")
    elif ACTION_STATE == 'add' and text:
        new = [k.strip().lower() for k in text.split(',') if k.strip()]
        for w in new:
            if w not in KEYWORDS:
                KEYWORDS.append(w)
        with open('keywords_base.txt','w',encoding='utf-8') as f:
            f.write(','.join(KEYWORDS))
        send_telegram(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {', '.join(new)}")
        ACTION_STATE = None
    elif ACTION_STATE == 'delete' and text:
        rem = [k.strip().lower() for k in text.split(',') if k.strip()]
        KEYWORDS = [w for w in KEYWORDS if w not in rem]
        with open('keywords_base.txt','w',encoding='utf-8') as f:
            f.write(','.join(KEYWORDS))
        send_telegram(f"üóë –£–¥–∞–ª–µ–Ω–æ: {', '.join(rem)}")
        ACTION_STATE = None
    return {"ok": True}

if __name__ == '__main__':
    manual_webhook_url = f'https://telegram-trends-bot.onrender.com/{TELEGRAM_TOKEN}'
    try:
        requests.get(f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook?url={manual_webhook_url}')
        log(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {manual_webhook_url}")
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
    threading.Thread(target=trends_loop, daemon=True).start()
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
