import os
import time
import json
import requests
import threading
import re
import pandas as pd
from datetime import datetime
from pytrends.request import TrendReq
from flask import Flask, request

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CURRENT_GEO = 'IN'
CURRENT_TIMEFRAME = 'now 1-d'    # 'now 1-d', 'now 7-d', 'now 30-d'
DEFAULT_KEYWORDS = ['casino', 'bet', 'play', 'win', 'game']

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open('keywords_base.txt', 'r', encoding='utf-8') as f:
        KEYWORDS = [k.strip() for k in f.read().split(',') if k.strip()]
except FileNotFoundError:
    KEYWORDS = DEFAULT_KEYWORDS.copy()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ
ACTION_STATE = None
VAL_FILTER_ENABLED = True        # –§–ª–∞–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ value
CHECK_INTERVAL = 900              # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤ (—Å–µ–∫)

TELEGRAM_TOKEN = '7543116655:AAHxgebuCQxGzY91o-sTxV2PSZjEe2nBWF8'
TELEGRAM_CHAT_ID = 784190963
MIN_TREND_VALUE = 30              # –ü–æ—Ä–æ–≥ value
FILTER_MODE = True                # –§–ª–∞–≥ —Ñ–∏–ª—å—Ç—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Flask(__name__)
pytrends = TrendReq(hl='en-US', tz=330)
checked_queries = set()
recent_trends = []

# === Health check ===
@app.route('/', methods=['GET'])
def index():
    return 'Bot is running', 200

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
def log(msg: str, file: str = "log.txt"):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {msg}")
    with open(file, 'a', encoding='utf-8') as f:
        f.write(f"[{timestamp}] {msg}\n")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram ===
def send_telegram(msg: str, reply_markup: dict = None):
    payload = {'chat_id': TELEGRAM_CHAT_ID, 'text': msg, 'parse_mode': 'HTML'}
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
    try:
        requests.post(f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage', data=payload)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–æ–≤ ===
def is_probable_new_brand(query: str) -> bool:
    q = query.lower()
    noise = ["how to","trick","strategy","tips","near me","is legal","rules","best","online gambling"]
    if any(phrase in q for phrase in noise) or len(q.split()) > 5:
        return False
    keywords = ["login","register","official","app","apk","casino","slots",
                "bet","rummy","teenpatti","bonus","play","earn","win"]
    if any(w in q for w in keywords):
        return True
    patterns = [
        r"\b(win|fox|cash|luck|mega|star|super)[a-z]{2,}",
        r"[a-z]+(bet|play|win|club|cash|app)\b",
        r"\b[a-z]{3,10}(casino|game|jackpot)\b",
        r"(teenpatti|rummy)\s+(cash|plus|king|master)"
    ]
    return any(re.search(p, q) for p in patterns)

# === –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel ===
def export_to_xlsx() -> str:
    if not recent_trends: return None
    df = pd.DataFrame(recent_trends)
    filename = "trends_export.xlsx"
    df.to_excel(filename, index=False)
    return filename

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ try/except ===
def check_trends():
    log(f"DEBUG: –ó–∞–ø—É—Å–∫–∞—é check_trends() timeframe={CURRENT_TIMEFRAME}, geo={CURRENT_GEO}")
    # build_payload
    try:
        pytrends.build_payload(['online casino'], geo=CURRENT_GEO, timeframe=CURRENT_TIMEFRAME)
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ build_payload: {e}")
        return
    # related_queries
    try:
        related = pytrends.related_queries()
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ related_queries: {e}")
        return
    log(f"DEBUG: related type {type(related)}, keys {list(related.keys())}")
    try:
        log(f"DEBUG: raw related {json.dumps(related, default=str, ensure_ascii=False)}")
    except Exception as ex:
        log(f"DEBUG: –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è related: {ex}, type {type(related)}")
    # processing rising
    rising = related.get('online casino', {}).get('rising')
    try:
        if rising is None:
            log("DEBUG: rising is None")
        elif hasattr(rising, 'empty') and rising.empty:
            log("DEBUG: rising empty DataFrame")
        else:
            log(f"DEBUG: rising rows {len(rising)}, cols {list(rising.columns)} sample {rising.head().to_dict()}")
            for _, row in rising.iterrows():
                q_val, val = row['query'], row['value']
                if (not VAL_FILTER_ENABLED or val >= MIN_TREND_VALUE) and q_val not in checked_queries:
                    if not FILTER_MODE or is_probable_new_brand(q_val):
                        checked_queries.add(q_val)
                        info = {"query": q_val, "value": val,
                                "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
                        recent_trends.append(info)
                        msg = (f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–∑–∏–Ω–æ –≤ {CURRENT_GEO} "
                               f"(–ø–µ—Ä–∏–æ–¥ {CURRENT_TIMEFRAME}):\n<b>{q_val}</b> (value: {val})")
                        send_telegram(msg)
                        log(msg, "log_new_casinos.txt")
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ rising: {e}")

# === –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª ===
def trends_loop():
    while True:
        check_trends()
        time.sleep(CHECK_INTERVAL)

# === Webhook –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    global MIN_TREND_VALUE, FILTER_MODE, VAL_FILTER_ENABLED, CURRENT_GEO, CURRENT_TIMEFRAME, ACTION_STATE, KEYWORDS, CHECK_INTERVAL
    data = request.get_json(force=True)
    log(f"‚öôÔ∏è Incoming update {json.dumps(data, ensure_ascii=False)}")
    log(f"DEBUG: callback_query {data.get('callback_query')}")
    cq = data.get('callback_query')
    if cq:
        cmd = cq.get('data', '')
        answer = None
        if cmd.startswith('set_value_'):
            v = int(cmd.split('_')[-1]); MIN_TREND_VALUE = v
            answer = f"‚úÖ –ü–æ—Ä–æ–≥ value: ‚â• {v}"
        elif cmd.startswith('geo_'):
            CURRENT_GEO = cmd.split('_')[-1]
            answer = f"üåç –°—Ç—Ä–∞–Ω–∞: {CURRENT_GEO}"
        elif cmd.startswith('tf_'):
            m = {'1d':'now 1-d','7d':'now 7-d','30d':'now 30-d'}
            l = {'1d':'1 –¥–µ–Ω—å','7d':'7 –¥–Ω–µ–π','30d':'30 –¥–Ω–µ–π'}
            tf = cmd.split('_')[-1]; CURRENT_TIMEFRAME = m[tf]
            answer = f"‚è± –ü–µ—Ä–∏–æ–¥: {l[tf]}"
        elif cmd.startswith('int_'):
            sec = int(cmd.split('_')[-1]); CHECK_INTERVAL = sec
            answer = f"‚è≤ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {sec//60} –º–∏–Ω"
        if answer:
            requests.post(
                f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerCallbackQuery',
                data={'callback_query_id': cq['id'], 'text': answer}
            )
            send_telegram(answer)
        return {"ok": True}

    text = data.get('message', {}).get('text', '')
    log(f"DEBUG: message text {text}")

    if text == '/start':
        kb = [
            [{'text':'üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞'},{'text':'üïµÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10'}],
            [{'text':'üì• Excel'},{'text':'‚öôÔ∏è –ü–æ—Ä–æ–≥'}],
            [{'text':'üéö –§–∏–ª—å—Ç—Ä'},{'text':'üî¢ –§–∏–ª—å—Ç—Ä value'}],
            [{'text':'üåç –°—Ç—Ä–∞–Ω–∞'},{'text':'üìÜ –ü–µ—Ä–∏–æ–¥'}],
            [{'text':'‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª'}],
            [{'text':'‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞'},{'text':'üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞'}],
            [{'text':'üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞'},{'text':'üîÑ –°–±—Ä–æ—Å —Å–ª–æ–≤'}],
            [{'text':'üîç –¢–µ—Å—Ç —Ç—Ä–µ–Ω–¥–æ–≤'}]
        ]
        send_telegram('üëã –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup={'keyboard': kb, 'resize_keyboard': True})

    elif text == 'üîç –¢–µ—Å—Ç —Ç—Ä–µ–Ω–¥–æ–≤':
        check_trends()
        send_telegram('üîç –¢–µ—Å—Ç —Ç—Ä–µ–Ω–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚Äî –≥–ª—è–Ω—å –ª–æ–≥–∏.')

    elif text == 'üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞':
        vs = 'ON' if VAL_FILTER_ENABLED else 'OFF'
        period = {'now 1-d':'1–¥','now 7-d':'7–¥','now 30-d':'30–¥'}[CURRENT_TIMEFRAME]
        interval_min = CHECK_INTERVAL // 60
        send_telegram(
            f"üì° ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω\n"
            f"üåç {CURRENT_GEO}\n"
            f"‚è± {period}\n"
            f"‚è≤ {interval_min} –º–∏–Ω\n"
            f"üíπ ‚â•{MIN_TREND_VALUE}\n"
            f"üéö {('–í–ö–õ' if FILTER_MODE else '–í–´–ö–õ')}\n"
            f"üî§ {', '.join(KEYWORDS)}"
        )

    elif text == 'üïµÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10':
        if recent_trends:
            t = "\n".join([f"{i['time']} ‚Äì {i['query']} ({i['value']})"
                           for i in recent_trends[-10:]])
            send_telegram(f"üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10:\n{t}")
        else:
            send_telegram('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.')

    elif text == 'üì• Excel':
        path = export_to_xlsx()
        if path:
            with open(path, 'rb') as f:
                requests.post(
                    f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument',
                    files={'document': f},
                    data={'chat_id': TELEGRAM_CHAT_ID}
                )
        else:
            send_telegram('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.')

    elif text == '‚öôÔ∏è –ü–æ—Ä–æ–≥':
        inline = [[{'text': str(v), 'callback_data': f'set_value_{v}'} for v in range(0, 101, 10)]]
        send_telegram('üîß –í—ã–±–µ—Ä–∏ –ø–æ—Ä–æ–≥ value:', reply_markup={'inline_keyboard': inline})

    elif text == 'üéö –§–∏–ª—å—Ç—Ä':
        FILTER_MODE = not FILTER_MODE
        send_telegram(f"üéö –§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤ {('–≤–∫–ª—é—á—ë–Ω' if FILTER_MODE else '–≤—ã–∫–ª—é—á–µ–Ω')}")

    elif text == 'üî¢ –§–∏–ª—å—Ç—Ä value':
        VAL_FILTER_ENABLED = not VAL_FILTER_ENABLED
        send_telegram(f"üî¢ –§–∏–ª—å—Ç—Ä value {('ON' if VAL_FILTER_ENABLED else 'OFF')}")

    elif text == 'üåç –°—Ç—Ä–∞–Ω–∞':
        inline = [[
            {'text':'üáÆüá≥ IN','callback_data':'geo_IN'},
            {'text':'üá™üá¨ EG','callback_data':'geo_EG'},
            {'text':'üá∫üá∏ US','callback_data':'geo_US'}
        ]]
        send_telegram('üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:', reply_markup={'inline_keyboard': inline})

    elif text == 'üìÜ –ü–µ—Ä–∏–æ–¥':
        inline = [[
            {'text':'1 –¥–µ–Ω—å','callback_data':'tf_1d'},
            {'text':'7 –¥–Ω–µ–π','callback_data':'tf_7d'},
            {'text':'30 –¥–Ω–µ–π','callback_data':'tf_30d'}
        ]]
        send_telegram('‚è± –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', reply_markup={'inline_keyboard': inline})

    elif text == '‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª':
        inline = [[
            {'text':'1 –º–∏–Ω','callback_data':'int_60'},
            {'text':'5 –º–∏–Ω','callback_data':'int_300'},
            {'text':'15 –º–∏–Ω','callback_data':'int_900'}
        ]]
        send_telegram('‚è± –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:', reply_markup={'inline_keyboard': inline})

    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞':
        ACTION_STATE = 'add'
        send_telegram('‚úçÔ∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:')

    elif text == 'üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞':
        send_telegram(f"üî§ –¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞: {', '.join(KEYWORDS)}")

    elif text == 'üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞':
        ACTION_STATE = 'delete'
        send_telegram('‚úÇÔ∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')

    elif text == 'üîÑ –°–±—Ä–æ—Å —Å–ª–æ–≤':
        KEYWORDS = DEFAULT_KEYWORDS.copy()
        with open('keywords_base.txt', 'w', encoding='utf-8') as f:
            f.write(','.join(KEYWORDS))
        send_telegram(f"üîÅ –°–±—Ä–æ—Å —Å–ª–æ–≤: {', '.join(KEYWORDS)}")

    elif ACTION_STATE == 'add' and text:
        new = [w.strip().lower() for w in text.split(',') if w.strip()]
        for w in new:
            if w not in KEYWORDS:
                KEYWORDS.append(w)
        with open('keywords_base.txt', 'w', encoding='utf-8') as f:
            f.write(','.join(KEYWORDS))
        send_telegram(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {', '.join(new)}")
        ACTION_STATE = None

    elif ACTION_STATE == 'delete' and text:
        rem = [w.strip().lower() for w in text.split(',') if w.strip()]
        KEYWORDS = [w for w in KEYWORDS if w not in rem]
        with open('keywords_base.txt', 'w', encoding='utf-8') as f:
            f.write(','.join(KEYWORDS))
        send_telegram(f"üóë –£–¥–∞–ª–µ–Ω–æ: {', '.join(rem)}")
        ACTION_STATE = None

    return {"ok": True}


if __name__ == '__main__':
    webhook_url = f'https://telegram-trends-bot.onrender.com/{TELEGRAM_TOKEN}'
    try:
        requests.get(f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook?url={webhook_url}')
        log(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ webhook: {e}")
    threading.Thread(target=trends_loop, daemon=True).start()
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
